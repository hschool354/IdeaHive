const { v4: uuidv4 } = require('uuid');
const db = require('../config/database');

/**
 * API l·∫•y danh s√°ch trang trong workspace.
 * @async
 * @param {Object} req - ƒê·ªëi t∆∞·ª£ng request t·ª´ client.
 * @param {Object} res - ƒê·ªëi t∆∞·ª£ng response ƒë·ªÉ g·ª≠i ph·∫£n h·ªìi.
 * @returns {Promise<void>} - Tr·∫£ v·ªÅ danh s√°ch trang trong workspace.
 * @throws {Error} - Tr·∫£ v·ªÅ l·ªói n·∫øu kh√¥ng th·ªÉ l·∫•y danh s√°ch trang.
 * @example
 * GET /api/workspaces/:id/pages
 */
const getWorkspacePages = async (req, res) => {
  try {
    const { id: workspaceId } = req.params;
    const userId = req.user.id;

    // Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ quy·ªÅn truy c·∫≠p workspace kh√¥ng
    const [memberCheck] = await db.query(
      'SELECT * FROM workspace_members WHERE workspace_id = ? AND user_id = ?',
      [workspaceId, userId]
    );

    if (memberCheck.length === 0) {
      return res.status(403).json({ message: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p workspace n√†y' });
    }

    // L·∫•y danh s√°ch trang root (kh√¥ng c√≥ parent_page_id) trong workspace
    const [rootPages] = await db.query(
      `SELECT p.id, p.title, p.icon, p.cover_url, p.is_public, p.share_link, 
              p.created_at, p.updated_at, u.full_name as created_by_name
       FROM pages p
       JOIN users u ON p.created_by = u.id
       WHERE p.workspace_id = ? AND p.parent_page_id IS NULL
       ORDER BY p.updated_at DESC`,
      [workspaceId]
    );

    // L·∫•y danh s√°ch t·∫•t c·∫£ c√°c trang trong workspace ƒë·ªÉ x√¢y d·ª±ng c·∫•u tr√∫c c√¢y
    const [allPages] = await db.query(
      `SELECT p.id, p.title, p.icon, p.cover_url, p.is_public, p.parent_page_id, 
              p.created_at, p.updated_at, u.full_name as created_by_name
       FROM pages p
       JOIN users u ON p.created_by = u.id
       WHERE p.workspace_id = ?
       ORDER BY p.updated_at DESC`,
      [workspaceId]
    );

    // X√¢y d·ª±ng c·∫•u tr√∫c c√¢y cho c√°c trang
    const pageMap = new Map();
    allPages.forEach(page => {
      page.children = [];
      pageMap.set(page.id, page);
    });

    // ƒê∆∞a c√°c trang con v√†o trang cha
    allPages.forEach(page => {
      if (page.parent_page_id && pageMap.has(page.parent_page_id)) {
        const parentPage = pageMap.get(page.parent_page_id);
        parentPage.children.push(page);
      }
    });

    res.status(200).json({
      rootPages,
      allPages
    });
  } catch (error) {
    console.error('L·ªói khi l·∫•y danh s√°ch trang:', error);
    res.status(500).json({ message: 'L·ªói khi l·∫•y danh s√°ch trang' });
  }
};

/**
 * API t·∫°o trang m·ªõi trong workspace.
 * @async
 * @param {Object} req - ƒê·ªëi t∆∞·ª£ng request t·ª´ client.
 * @param {Object} res - ƒê·ªëi t∆∞·ª£ng response ƒë·ªÉ g·ª≠i ph·∫£n h·ªìi.
 * @returns {Promise<void>} - Tr·∫£ v·ªÅ th√¥ng tin trang m·ªõi ƒë√£ t·∫°o.
 * @throws {Error} - Tr·∫£ v·ªÅ l·ªói n·∫øu kh√¥ng th·ªÉ t·∫°o trang.
 * @example
 * POST /api/workspaces/:id/pages
 * Body: { "title": "Trang m·ªõi", "icon": "üìù", "parent_page_id": "optional-parent-id" }
 */
const createPage = async (req, res) => {
  try {
    const { id: workspaceId } = req.params;
    const userId = req.user.id;
    const { title, icon, parent_page_id } = req.body;

    // Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ quy·ªÅn trong workspace
    const [memberCheck] = await db.query(
      `SELECT wm.* FROM workspace_members wm
       JOIN roles r ON wm.role_id = r.id
       WHERE wm.workspace_id = ? AND wm.user_id = ? 
       AND r.name IN ('OWNER', 'ADMIN', 'MEMBER')`,
      [workspaceId, userId]
    );

    if (memberCheck.length === 0) {
      return res.status(403).json({ message: 'Kh√¥ng c√≥ quy·ªÅn t·∫°o trang trong workspace n√†y' });
    }

    // N·∫øu c√≥ parent_page_id, ki·ªÉm tra xem n√≥ c√≥ t·ªìn t·∫°i v√† thu·ªôc workspace kh√¥ng
    if (parent_page_id) {
      const [parentCheck] = await db.query(
        'SELECT * FROM pages WHERE id = ? AND workspace_id = ?',
        [parent_page_id, workspaceId]
      );

      if (parentCheck.length === 0) {
        return res.status(400).json({ message: 'Trang cha kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng thu·ªôc workspace n√†y' });
      }
    }

    // T·∫°o ID m·ªõi cho trang
    const pageId = uuidv4();

    // Th√™m trang m·ªõi v√†o c∆° s·ªü d·ªØ li·ªáu
    await db.query(
      `INSERT INTO pages 
       (id, workspace_id, title, icon, parent_page_id, created_by) 
       VALUES (?, ?, ?, ?, ?, ?)`,
      [pageId, workspaceId, title, icon, parent_page_id || null, userId]
    );

    // T·∫°o n·ªôi dung trang m·ªõi trong MongoDB (n·∫øu b·∫°n s·ª≠ d·ª•ng MongoDB cho n·ªôi dung)
    // Gi·∫£ s·ª≠ b·∫°n c√≥ m·ªôt service ho·∫∑c h√†m ƒë·ªÉ t·∫°o n·ªôi dung trong MongoDB
    // await createPageContentInMongoDB(pageId);

    // L·∫•y th√¥ng tin trang m·ªõi ƒë√£ t·∫°o
    const [newPage] = await db.query(
      `SELECT p.id, p.title, p.icon, p.cover_url, p.is_public, p.parent_page_id,
              p.created_at, p.updated_at, u.full_name as created_by_name
       FROM pages p
       JOIN users u ON p.created_by = u.id
       WHERE p.id = ?`,
      [pageId]
    );

    res.status(201).json({
      message: 'Trang m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
      page: newPage[0]
    });
  } catch (error) {
    console.error('L·ªói khi t·∫°o trang:', error);
    res.status(500).json({ message: 'L·ªói khi t·∫°o trang m·ªõi' });
  }
};

/**
 * API l·∫•y th√¥ng tin chi ti·∫øt c·ªßa trang.
 * @async
 * @param {Object} req - ƒê·ªëi t∆∞·ª£ng request t·ª´ client.
 * @param {Object} res - ƒê·ªëi t∆∞·ª£ng response ƒë·ªÉ g·ª≠i ph·∫£n h·ªìi.
 * @returns {Promise<void>} - Tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt c·ªßa trang.
 * @throws {Error} - Tr·∫£ v·ªÅ l·ªói n·∫øu kh√¥ng th·ªÉ l·∫•y th√¥ng tin trang.
 * @example
 * GET /api/pages/:id
 */
const getPageDetails = async (req, res) => {
  try {
    const { id: pageId } = req.params;
    const userId = req.user.id;

    // L·∫•y th√¥ng tin trang v√† workspace c·ªßa n√≥
    const [pages] = await db.query(
      `SELECT p.*, w.id as workspace_id, u.full_name as created_by_name
       FROM pages p
       JOIN workspaces w ON p.workspace_id = w.id
       JOIN users u ON p.created_by = u.id
       WHERE p.id = ?`,
      [pageId]
    );

    if (pages.length === 0) {
      return res.status(404).json({ message: 'Trang kh√¥ng t·ªìn t·∫°i' });
    }

    const page = pages[0];
    const workspaceId = page.workspace_id;

    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p trang
    // N·∫øu trang l√† public, cho ph√©p truy c·∫≠p
    if (!page.is_public) {
      // Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ trong workspace kh√¥ng
      const [memberCheck] = await db.query(
        'SELECT * FROM workspace_members WHERE workspace_id = ? AND user_id = ?',
        [workspaceId, userId]
      );

      if (memberCheck.length === 0) {
        return res.status(403).json({ message: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y' });
      }
    }

    // L·∫•y c√°c trang con (n·∫øu c√≥)
    const [childPages] = await db.query(
      `SELECT id, title, icon, updated_at 
       FROM pages 
       WHERE parent_page_id = ?
       ORDER BY updated_at DESC`,
      [pageId]
    );

    // L·∫•y th√¥ng tin trang cha (n·∫øu c√≥)
    let parentPage = null;
    if (page.parent_page_id) {
      const [parentResult] = await db.query(
        'SELECT id, title, icon FROM pages WHERE id = ?',
        [page.parent_page_id]
      );
      if (parentResult.length > 0) {
        parentPage = parentResult[0];
      }
    }

    // L·∫•y th√¥ng tin n·ªôi dung trang t·ª´ MongoDB
    // B·∫°n c·∫ßn tri·ªÉn khai h√†m n√†y d·ª±a tr√™n c√°ch b·∫°n l∆∞u tr·ªØ n·ªôi dung trong MongoDB
    // const pageContent = await getPageContentFromMongoDB(pageId);

    const result = {
      ...page,
      children: childPages,
      parent: parentPage,
      // content: pageContent, // N·ªôi dung t·ª´ MongoDB
    };

    res.status(200).json(result);
  } catch (error) {
    console.error('L·ªói khi l·∫•y th√¥ng tin trang:', error);
    res.status(500).json({ message: 'L·ªói khi l·∫•y th√¥ng tin trang' });
  }
};

/**
 * API c·∫≠p nh·∫≠t metadata c·ªßa trang.
 * @async
 * @param {Object} req - ƒê·ªëi t∆∞·ª£ng request t·ª´ client.
 * @param {Object} res - ƒê·ªëi t∆∞·ª£ng response ƒë·ªÉ g·ª≠i ph·∫£n h·ªìi.
 * @returns {Promise<void>} - Tr·∫£ v·ªÅ th√¥ng tin trang ƒë√£ c·∫≠p nh·∫≠t.
 * @throws {Error} - Tr·∫£ v·ªÅ l·ªói n·∫øu kh√¥ng th·ªÉ c·∫≠p nh·∫≠t trang.
 * @example
 * PUT /api/pages/:id
 * Body: { "title": "Ti√™u ƒë·ªÅ m·ªõi", "icon": "üìò", "cover_url": "url-to-cover", "is_public": true }
 */
const updatePage = async (req, res) => {
  try {
    const { id: pageId } = req.params;
    const userId = req.user.id;
    const { title, icon, cover_url, is_public, parent_page_id } = req.body;

    // L·∫•y th√¥ng tin trang hi·ªán t·∫°i
    const [pages] = await db.query(
      'SELECT * FROM pages WHERE id = ?',
      [pageId]
    );

    if (pages.length === 0) {
      return res.status(404).json({ message: 'Trang kh√¥ng t·ªìn t·∫°i' });
    }

    const page = pages[0];
    const workspaceId = page.workspace_id;

    // Ki·ªÉm tra quy·ªÅn ch·ªânh s·ª≠a trang
    const [memberCheck] = await db.query(
      `SELECT wm.* FROM workspace_members wm
       JOIN roles r ON wm.role_id = r.id
       WHERE wm.workspace_id = ? AND wm.user_id = ? 
       AND r.name IN ('OWNER', 'ADMIN', 'MEMBER')`,
      [workspaceId, userId]
    );

    if (memberCheck.length === 0) {
      return res.status(403).json({ message: 'Kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a trang n√†y' });
    }

    // Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa trang cha m·ªõi (n·∫øu ƒë∆∞·ª£c cung c·∫•p)
    if (parent_page_id && parent_page_id !== page.parent_page_id) {
      // Ki·ªÉm tra trang cha m·ªõi c√≥ t·ªìn t·∫°i kh√¥ng
      const [parentCheck] = await db.query(
        'SELECT * FROM pages WHERE id = ? AND workspace_id = ?',
        [parent_page_id, workspaceId]
      );

      if (parentCheck.length === 0) {
        return res.status(400).json({ message: 'Trang cha kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng thu·ªôc workspace n√†y' });
      }

      // Ki·ªÉm tra xem trang cha m·ªõi c√≥ ph·∫£i l√† con c·ªßa trang hi·ªán t·∫°i kh√¥ng (tr√°nh v√≤ng l·∫∑p)
      const isDescendant = await checkIfDescendant(pageId, parent_page_id, db);
      if (isDescendant) {
        return res.status(400).json({ message: 'Kh√¥ng th·ªÉ ch·ªçn trang con l√†m trang cha' });
      }
    }

    // C·∫≠p nh·∫≠t metadata c·ªßa trang
    await db.query(
      `UPDATE pages 
       SET title = COALESCE(?, title),
           icon = COALESCE(?, icon),
           cover_url = COALESCE(?, cover_url),
           is_public = COALESCE(?, is_public),
           parent_page_id = COALESCE(?, parent_page_id)
       WHERE id = ?`,
      [
        title, 
        icon, 
        cover_url, 
        is_public !== undefined ? is_public : page.is_public,
        parent_page_id !== undefined ? parent_page_id : page.parent_page_id,
        pageId
      ]
    );

    // L·∫•y th√¥ng tin trang sau khi c·∫≠p nh·∫≠t
    const [updatedPage] = await db.query(
      `SELECT p.*, u.full_name as created_by_name
       FROM pages p
       JOIN users u ON p.created_by = u.id
       WHERE p.id = ?`,
      [pageId]
    );

    res.status(200).json({
      message: 'C·∫≠p nh·∫≠t trang th√†nh c√¥ng',
      page: updatedPage[0]
    });
  } catch (error) {
    console.error('L·ªói khi c·∫≠p nh·∫≠t trang:', error);
    res.status(500).json({ message: 'L·ªói khi c·∫≠p nh·∫≠t trang' });
  }
};

/**
 * API x√≥a trang.
 * @async
 * @param {Object} req - ƒê·ªëi t∆∞·ª£ng request t·ª´ client.
 * @param {Object} res - ƒê·ªëi t∆∞·ª£ng response ƒë·ªÉ g·ª≠i ph·∫£n h·ªìi.
 * @returns {Promise<void>} - Tr·∫£ v·ªÅ th√¥ng b√°o x√≥a th√†nh c√¥ng.
 * @throws {Error} - Tr·∫£ v·ªÅ l·ªói n·∫øu kh√¥ng th·ªÉ x√≥a trang.
 * @example
 * DELETE /api/pages/:id
 */
const deletePage = async (req, res) => {
  const connection = await db.getConnection();
  
  try {
    await connection.beginTransaction();
    
    const { id: pageId } = req.params;
    const userId = req.user.id;

    // L·∫•y th√¥ng tin trang
    const [pages] = await connection.query(
      'SELECT * FROM pages WHERE id = ?',
      [pageId]
    );

    if (pages.length === 0) {
      await connection.rollback();
      return res.status(404).json({ message: 'Trang kh√¥ng t·ªìn t·∫°i' });
    }

    const page = pages[0];
    const workspaceId = page.workspace_id;

    // Ki·ªÉm tra quy·ªÅn x√≥a trang
    const [memberCheck] = await connection.query(
      `SELECT wm.* FROM workspace_members wm
       JOIN roles r ON wm.role_id = r.id
       WHERE wm.workspace_id = ? AND wm.user_id = ? 
       AND r.name IN ('OWNER', 'ADMIN')`,
      [workspaceId, userId]
    );

    if (memberCheck.length === 0) {
      await connection.rollback();
      return res.status(403).json({ message: 'Kh√¥ng c√≥ quy·ªÅn x√≥a trang n√†y' });
    }

    // L·∫•y danh s√°ch t·∫•t c·∫£ c√°c trang con (bao g·ªìm c·∫£ ch√°u, ch·∫Øt,...)
    const descendantPages = await getAllDescendantPages(pageId, connection);
    const allPageIds = [pageId, ...descendantPages.map(p => p.id)];

    // X√≥a c√°c favorites li√™n quan ƒë·∫øn c√°c trang n√†y
    await connection.query(
      'DELETE FROM favorites WHERE page_id IN (?)',
      [allPageIds]
    );

    // C·∫≠p nh·∫≠t parent_page_id cho c√°c trang con tr·ª±c ti·∫øp
    await connection.query(
      'UPDATE pages SET parent_page_id = ? WHERE parent_page_id = ?',
      [page.parent_page_id, pageId]
    );

    // X√≥a n·ªôi dung trang t·ª´ MongoDB (n·∫øu c√≥)
    // B·∫°n c·∫ßn tri·ªÉn khai ph·∫ßn n√†y d·ª±a tr√™n c√°ch b·∫°n l∆∞u tr·ªØ n·ªôi dung trong MongoDB
    // await deletePageContentsFromMongoDB(allPageIds);

    // X√≥a trang t·ª´ MySQL
    await connection.query(
      'DELETE FROM pages WHERE id = ?',
      [pageId]
    );

    await connection.commit();
    
    res.status(200).json({
      message: 'X√≥a trang th√†nh c√¥ng'
    });
  } catch (error) {
    await connection.rollback();
    console.error('L·ªói khi x√≥a trang:', error);
    res.status(500).json({ message: 'L·ªói khi x√≥a trang' });
  } finally {
    connection.release();
  }
};

/**
 * API nh√¢n b·∫£n trang.
 * @async
 * @param {Object} req - ƒê·ªëi t∆∞·ª£ng request t·ª´ client.
 * @param {Object} res - ƒê·ªëi t∆∞·ª£ng response ƒë·ªÉ g·ª≠i ph·∫£n h·ªìi.
 * @returns {Promise<void>} - Tr·∫£ v·ªÅ th√¥ng tin trang ƒë√£ nh√¢n b·∫£n.
 * @throws {Error} - Tr·∫£ v·ªÅ l·ªói n·∫øu kh√¥ng th·ªÉ nh√¢n b·∫£n trang.
 * @example
 * POST /api/pages/:id/duplicate
 */
const duplicatePage = async (req, res) => {
  const connection = await db.getConnection();
  
  try {
    await connection.beginTransaction();

    const { id: pageId } = req.params;
    const userId = req.user.id;

    // L·∫•y th√¥ng tin trang g·ªëc
    const [pages] = await connection.query(
      'SELECT * FROM pages WHERE id = ?',
      [pageId]
    );

    if (pages.length === 0) {
      await connection.rollback();
      return res.status(404).json({ message: 'Trang kh√¥ng t·ªìn t·∫°i' });
    }

    const originalPage = pages[0];
    const workspaceId = originalPage.workspace_id;

    // Ki·ªÉm tra quy·ªÅn trong workspace
    const [memberCheck] = await connection.query(
      `SELECT wm.* FROM workspace_members wm
       JOIN roles r ON wm.role_id = r.id
       WHERE wm.workspace_id = ? AND wm.user_id = ? 
       AND r.name IN ('OWNER', 'ADMIN', 'MEMBER')`,
      [workspaceId, userId]
    );

    if (memberCheck.length === 0) {
      await connection.rollback();
      return res.status(403).json({ message: 'Kh√¥ng c√≥ quy·ªÅn nh√¢n b·∫£n trang trong workspace n√†y' });
    }

    // T·∫°o ID m·ªõi cho trang nh√¢n b·∫£n
    const newPageId = uuidv4();

    // Th√™m trang m·ªõi v√†o c∆° s·ªü d·ªØ li·ªáu v·ªõi d·ªØ li·ªáu t·ª´ trang g·ªëc
    await connection.query(
      `INSERT INTO pages 
       (id, workspace_id, title, icon, cover_url, parent_page_id, is_public, created_by) 
       VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
      [
        newPageId,
        workspaceId,
        `${originalPage.title} (Copy)`,
        originalPage.icon,
        originalPage.cover_url,
        originalPage.parent_page_id,
        originalPage.is_public,
        userId
      ]
    );

    // L·∫•y danh s√°ch c√°c trang con c·ªßa trang g·ªëc
    const [childPages] = await connection.query(
      'SELECT * FROM pages WHERE parent_page_id = ?',
      [pageId]
    );

    // Map ƒë·ªÉ l∆∞u tr·ªØ √°nh x·∫° gi·ªØa ID trang c≈© v√† ID trang m·ªõi
    const pageIdMap = new Map();
    pageIdMap.set(pageId, newPageId);

    // Nh√¢n b·∫£n ƒë·ªá quy c√°c trang con
    await duplicateChildPages(childPages, newPageId, userId, pageIdMap, connection);

    
    await connection.commit();

    // L·∫•y th√¥ng tin trang m·ªõi ƒë√£ t·∫°o
    const [newPage] = await db.query(
      `SELECT p.*, u.full_name as created_by_name
       FROM pages p
       JOIN users u ON p.created_by = u.id
       WHERE p.id = ?`,
      [newPageId]
    );

    res.status(201).json({
      message: 'Nh√¢n b·∫£n trang th√†nh c√¥ng',
      page: newPage[0]
    });
  } catch (error) {
    await connection.rollback();
    console.error('L·ªói khi nh√¢n b·∫£n trang:', error);
    res.status(500).json({ message: 'L·ªói khi nh√¢n b·∫£n trang' });
  } finally {
    connection.release();
  }
};

/**
 * H√†m ki·ªÉm tra xem trang B c√≥ ph·∫£i l√† con ch√°u c·ªßa trang A kh√¥ng.
 * @async
 * @param {string} pageA - ID c·ªßa trang A.
 * @param {string} pageB - ID c·ªßa trang B.
 * @param {Object} dbConnection - K·∫øt n·ªëi database.
 * @returns {Promise<boolean>} - Tr·∫£ v·ªÅ true n·∫øu B l√† con ch√°u c·ªßa A, ng∆∞·ª£c l·∫°i false.
 */
async function checkIfDescendant(pageA, pageB, dbConnection) {
  let currentPageId = pageB;
  const visited = new Set();

  while (currentPageId) {
    // N·∫øu ƒë√£ x√©t trang n√†y r·ªìi (tr√°nh v√≤ng l·∫∑p v√¥ h·∫°n)
    if (visited.has(currentPageId)) {
      return false;
    }
    visited.add(currentPageId);

    // N·∫øu trang hi·ªán t·∫°i l√† pageA, th√¨ pageB l√† con ch√°u c·ªßa pageA
    if (currentPageId === pageA) {
      return true;
    }

    // L·∫•y trang cha c·ªßa trang hi·ªán t·∫°i
    const [parents] = await dbConnection.query(
      'SELECT parent_page_id FROM pages WHERE id = ?',
      [currentPageId]
    );

    if (parents.length === 0 || !parents[0].parent_page_id) {
      return false; // Kh√¥ng c√≤n trang cha n·ªØa
    }

    currentPageId = parents[0].parent_page_id;
  }

  return false;
}

/**
 * H√†m l·∫•y t·∫•t c·∫£ c√°c trang con ch√°u c·ªßa m·ªôt trang.
 * @async
 * @param {string} pageId - ID c·ªßa trang cha.
 * @param {Object} connection - K·∫øt n·ªëi database.
 * @returns {Promise<Array>} - Tr·∫£ v·ªÅ m·∫£ng c√°c trang con ch√°u.
 */
async function getAllDescendantPages(pageId, connection) {
  const descendants = [];
  const queue = [pageId];
  const visited = new Set();

  while (queue.length > 0) {
    const currentId = queue.shift();
    
    if (visited.has(currentId)) continue;
    visited.add(currentId);

    // L·∫•y t·∫•t c·∫£ c√°c trang con tr·ª±c ti·∫øp
    const [childPages] = await connection.query(
      'SELECT * FROM pages WHERE parent_page_id = ?',
      [currentId]
    );

    for (const child of childPages) {
      descendants.push(child);
      queue.push(child.id);
    }
  }

  return descendants;
}

/**
 * H√†m nh√¢n b·∫£n ƒë·ªá quy c√°c trang con.
 * @async
 * @param {Array} childPages - M·∫£ng c√°c trang con c·∫ßn nh√¢n b·∫£n.
 * @param {string} newParentId - ID c·ªßa trang cha m·ªõi.
 * @param {string} userId - ID c·ªßa ng∆∞·ªùi d√πng th·ª±c hi·ªán nh√¢n b·∫£n.
 * @param {Map} pageIdMap - Map √°nh x·∫° gi·ªØa ID trang c≈© v√† ID trang m·ªõi.
 * @param {Object} connection - K·∫øt n·ªëi database.
 * @returns {Promise<void>}
 */
async function duplicateChildPages(childPages, newParentId, userId, pageIdMap, connection) {
  for (const childPage of childPages) {
    const newChildId = uuidv4();
    pageIdMap.set(childPage.id, newChildId);

    // T·∫°o b·∫£n sao c·ªßa trang con
    await connection.query(
      `INSERT INTO pages 
       (id, workspace_id, title, icon, cover_url, parent_page_id, is_public, created_by) 
       VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
      [
        newChildId,
        childPage.workspace_id,
        childPage.title,
        childPage.icon,
        childPage.cover_url,
        newParentId,
        childPage.is_public,
        userId
      ]
    );

    // L·∫•y c√°c trang con c·ªßa trang con hi·ªán t·∫°i
    const [grandChildPages] = await connection.query(
      'SELECT * FROM pages WHERE parent_page_id = ?',
      [childPage.id]
    );

    // ƒê·ªá quy nh√¢n b·∫£n c√°c trang ch√°u
    if (grandChildPages.length > 0) {
      await duplicateChildPages(grandChildPages, newChildId, userId, pageIdMap, connection);
    }
  }
}

module.exports = {
  getWorkspacePages,
  createPage,
  getPageDetails,
  updatePage,
  deletePage,
  duplicatePage
};
